import 'dart:io';
import 'package:dio/dio.dart';
import 'package:fintrack/repositories/auth_repository.dart';
import 'package:fintrack/services/storage_service.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'auth_event.dart';
import 'auth_state.dart';

class AuthBloc extends Bloc<AuthEvent, AuthState> {
  final AuthRepository _authRepository;

  AuthBloc({required AuthRepository authRepository})
      : _authRepository = authRepository,
        super(AuthInitial()) {
    on<AppStarted>(_onAppStarted);
    on<LoginRequested>(_onLoginRequested);
    on<RegisterRequested>(_onRegisterRequested);
    on<ForgotPasswordRequested>(_onForgotPasswordRequested);
    on<ResetPasswordRequested>(_onResetPasswordRequested);
    on<LogoutRequested>(_onLogoutRequested);
    on<GoogleSignInRequested>(_onGoogleSignInRequested);
    on<GuestLoginRequested>(_onGuestLoginRequested);
    on<RegisterFromGuestRequested>(_onRegisterFromGuestRequested);
  }

  Future<void> _onAppStarted(AppStarted event, Emitter<AuthState> emit) async {
    try {
      final token = await SecureStorage.getToken();
      if (token != null) {
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthInitial());
      }
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  Future<void> _onLoginRequested(LoginRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.login(event.username, event.password);
      final token = await SecureStorage.getToken();
      debugPrint("‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: $token");

      if (token != null) {
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthFailure("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω"));
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  Future<void> _onRegisterRequested(RegisterRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.register(event.username, event.email, event.password);
      debugPrint("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...");
      final token = await SecureStorage.getToken();

      if (token != null) {
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthFailure("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω"));
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  Future<void> _onForgotPasswordRequested(ForgotPasswordRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.forgotPassword(event.email);
      emit(PasswordResetEmailSent());
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${e.toString()}");
      emit(AuthFailure("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞"));
    }
  }


  Future<void> _onResetPasswordRequested(ResetPasswordRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.resetPassword(event.token, event.newPassword);
      emit(PasswordResetSuccess());
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: ${e.toString()}");
      emit(AuthFailure("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è"));
    }
  }

  Future<void> _onValidateToken(
      ValidateResetToken event,
      Emitter<AuthState> emit,
      ) async {
    emit(AuthLoading());
    try {
      final isValid = await _authRepository.validateResetToken(event.token);
      if (isValid) {
        emit(TokenValid());
      } else {
        emit(TokenInvalid("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω"));
      }
    } catch (e) {
      emit(TokenInvalid(e.toString()));
    }
  }

  Future<void> _onLogoutRequested(LogoutRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      debugPrint('üîµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã—Ö–æ–¥...');
      await _authRepository.logout();
      debugPrint('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      emit(AuthLoggedOut());
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
      emit(AuthFailure(_getErrorMessage(e)));
      // –ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      emit(AuthLoggedOut());
    }
  }

  Future<void> _onGoogleSignInRequested(GoogleSignInRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.signInWithGoogle();
      final token = await SecureStorage.getToken();
      debugPrint("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ Google Sign-In: $token");

      if (token != null) {
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthFailure("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω"));
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  Future<void> _onGuestLoginRequested(GuestLoginRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.createGuest();
      final token = await SecureStorage.getToken();
      debugPrint("‚úÖ –í—Ö–æ–¥ –∫–∞–∫ –≥–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

      if (token != null) {
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthFailure("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω"));
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –∫–∞–∫ –≥–æ—Å—Ç—å: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  Future<void> _onRegisterFromGuestRequested(RegisterFromGuestRequested event, Emitter<AuthState> emit) async {
    emit(AuthLoading());
    try {
      await _authRepository.registerFromGuest(event.username, event.email, event.password);
      debugPrint("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –≥–æ—Å—Ç—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
      final token = await SecureStorage.getToken();

      if (token != null) {
        emit(AuthSuccess("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"));
        emit(AuthAuthenticated(token));
      } else {
        emit(AuthFailure("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω"));
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –≥–æ—Å—Ç—è: ${e.toString()}");
      emit(AuthFailure(_getErrorMessage(e)));
    }
  }

  /// **–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**
  String _getErrorMessage(dynamic error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (error is Exception) {
      String message = error.toString();
      if (message.startsWith('Exception: ')) {
        return message.substring(10); // –£–±–∏—Ä–∞–µ–º 'Exception: ' –∏–∑ –Ω–∞—á–∞–ª–∞
      }
    }

    if (error is DioException) {
      switch (error.type) {
        case DioExceptionType.connectionTimeout:
        case DioExceptionType.sendTimeout:
        case DioExceptionType.receiveTimeout:
          return "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ";

        case DioExceptionType.badResponse:
          if (error.response?.statusCode == 401) {
            return "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
          } else if (error.response?.statusCode == 500) {
            return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
          }
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ
          final data = error.response?.data;
          if (data != null && data['message'] != null) {
            return data['message'];
          }
          return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑";

        case DioExceptionType.cancel:
          return "–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞";

        case DioExceptionType.connectionError:
          return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";

        case DioExceptionType.unknown:
        default:
          return error.message ?? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ";
      }
    }

    if (error is SocketException) {
      return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
    }

    if (error.toString().contains("FormatException")) {
      return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞";
    }

    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑";
  }
}
