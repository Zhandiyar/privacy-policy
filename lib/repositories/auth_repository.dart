import 'package:fintrack/services/api_client.dart';
import 'package:fintrack/services/storage_service.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';

class AuthRepository {
  final ApiClient _apiClient;
  final GoogleSignIn _googleSignIn = GoogleSignIn(
    scopes: ['email', 'profile'],
    serverClientId: '663807920764-i8k5osbt3ug04iotrr1cu4mgpfrbjb45.apps.googleusercontent.com',
    clientId: defaultTargetPlatform == TargetPlatform.iOS 
      ? '663807920764-fqsf7p68appvnlm7j2ig3sj46cklrdfr.apps.googleusercontent.com'
      : null,
    forceCodeForRefreshToken: true,
  );

  AuthRepository(this._apiClient);

  Future<void> login(String username, String password) async {
    try {
      final response = await _apiClient.dio.post('/api/auth/login', data: {
        "username": username,
        "password": password,
      });
      
      if (response.data['success'] == false) {
        throw DioException(
          requestOptions: RequestOptions(path: '/api/auth/login'),
          response: Response(
            requestOptions: RequestOptions(path: '/api/auth/login'),
            statusCode: 401,
            data: response.data
          )
        );
      }
      
      await SecureStorage.saveToken(response.data['data']);
      debugPrint("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –¢–æ–∫–µ–Ω: ${response.data['data']}");
    } on DioException catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ DIO –ø—Ä–∏ –≤—Ö–æ–¥–µ: ${e.response?.data}");
      throw Exception(_handleDioException(e));
    } catch (e) {
      debugPrint("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: $e");
      throw Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É");
    }
  }

  Future<void> register(String username, String email, String password) async {
    try {
      final response = await _apiClient.dio.post('/api/auth/register', data: {
        "username": username,
        "email": email,
        "password": password,
      });

      if (response.data['success'] == false) {
        throw DioException(
          requestOptions: RequestOptions(path: '/api/auth/register'),
          response: Response(
            requestOptions: RequestOptions(path: '/api/auth/register'),
            statusCode: 400,
            data: response.data
          )
        );
      }

      await SecureStorage.saveToken(response.data['data']);
      debugPrint("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –¢–æ–∫–µ–Ω: ${response.data['data']}");
    } on DioException catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ DIO –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.response?.data}");
      throw Exception(_handleRegistrationError(e));
    } catch (e) {
      debugPrint("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e");
      throw Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
  }

  Future<void> forgotPassword(String email) async {
    try {
      final response = await _apiClient.dio.post(
        '/api/auth/forgot-password',
        data: {"email": email},
        options: Options(
          headers: {
            "Content-Type": "application/json",
            "Accept": "application/json",
          },
        ),
      );
      final Map<String, dynamic> data = response.data;

      if (data['success'] == true) {
        debugPrint("üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${data['message']}");
      } else {
        throw Exception(data['message'] ?? "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞");
      }
    } on DioException catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${e.message}");
      if (e.response?.statusCode == 500 && email.toLowerCase().endsWith('@mail.ru')) {
        throw Exception("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ mail.ru –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π email –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
      throw Exception(_handleDioException(e));
    } catch (e) {
      debugPrint("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: $e");
      throw Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }


  Future<void> resetPassword(String token, String newPassword) async {
    try {
      await _apiClient.dio.post('/api/auth/reset-password', data: {
        "token": token,
        "newPassword": newPassword,
      });
    } on DioException catch (e) {
      throw Exception(_handleDioException(e));
    }
  }


  Future<bool> validateResetToken(String token) async {
    try {
      final response = await _apiClient.dio.get('/api/auth/reset-password',
        queryParameters: {'token': token},
      );
      return response.data['success'] == true;
    } catch (e) {
      return false;
    }
  }


  Future<void> logout() async {
    try {
      await SecureStorage.removeToken();
      
      final isSignedIn = await _googleSignIn.isSignedIn();
      if (isSignedIn) {
        await _googleSignIn.signOut();
        
        if (defaultTargetPlatform == TargetPlatform.iOS) {
          await _googleSignIn.disconnect();
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: $e');
      throw Exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  Future<void> signInWithGoogle() async {
    try {
      debugPrint('üîµ –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google...');
      
      final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
      if (googleUser == null) {
        throw Exception('–í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      }

      debugPrint('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${googleUser.email}');
      
      final GoogleSignInAuthentication googleAuth = await googleUser.authentication;
      final String? idToken = googleAuth.idToken;
      
      if (idToken == null) {
        throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Google');
      }
      
      final response = await _apiClient.dio.post('/api/auth/google-signin', data: {
        "idToken": idToken,
        "platform": defaultTargetPlatform.toString(),
      });

      if (response.data == null || response.data['success'] == false) {
        throw Exception(response.data?['message'] ?? '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google');
      }
      
      await SecureStorage.saveToken(response.data['data']);
      
    } on DioException catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${e.response?.statusCode}');
      throw Exception(_handleDioException(e));
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞: ${e.toString()}');
      throw Exception('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: ${e.toString()}');
    }
  }

  String _handleDioException(DioException e) {
    if (e.response != null) {
      final statusCode = e.response?.statusCode;
      final data = e.response?.data;
      
      if (data != null && data['message'] != null) {
        return data['message'];
      }
      
      switch (statusCode) {
        case 401:
          return "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
        case 403:
          return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ";
        case 400:
          return "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞";
        case 404:
          return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        case 500:
          return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
        default:
          return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É";
      }
    }
    
    if (e.type == DioExceptionType.connectionTimeout ||
        e.type == DioExceptionType.receiveTimeout ||
        e.type == DioExceptionType.sendTimeout) {
      return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
    }
    
    if (e.type == DioExceptionType.connectionError) {
      return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
    }

    return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.";
  }

  String _handleRegistrationError(DioException e) {
    if (e.response?.data != null && e.response?.data['message'] != null) {
      final errorMessage = e.response?.data['message'];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      if (errorMessage.contains('Password must be')) {
        return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤";
      }

      if (errorMessage.contains('Username already exists')) {
        return "–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ";
      }

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      switch(errorMessage) {
        case 'Invalid email address':
          return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞";
        case 'Email already exists':
          return "–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω";
        case 'Username already exists':
          return "–≠—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ";
        case 'Password is too short':
          return "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π";
        case 'Password is too weak':
          return "–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π";
        case 'Password must be 6-100 characters':
          return "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 6 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤";
        default:
          // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É
          return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö";
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞–º
    switch (e.response?.statusCode) {
      case 400:
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö";
      case 409:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç";
      case 500:
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      default:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
    }
  }

  Future<void> createGuest() async {
    try {
      final response = await _apiClient.dio.post('/api/auth/guest');
      
      if (response.data['success'] == false) {
        throw DioException(
          requestOptions: RequestOptions(path: '/api/auth/guest'),
          response: Response(
            requestOptions: RequestOptions(path: '/api/auth/guest'),
            statusCode: 400,
            data: response.data
          )
        );
      }

      await SecureStorage.saveToken(response.data['data']);
      await SecureStorage.saveIsGuest(true);
      debugPrint("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç—è. –¢–æ–∫–µ–Ω: ${response.data['data']}");
    } on DioException catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ DIO –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç—è: ${e.response?.data}");
      throw Exception(_handleDioException(e));
    } catch (e) {
      debugPrint("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç—è: $e");
      throw Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞");
    }
  }

  Future<void> registerFromGuest(String username, String email, String password) async {
    try {
      debugPrint("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –≥–æ—Å—Ç—è...");

      final currentToken = await SecureStorage.getToken();
      if (currentToken == null) {
        debugPrint("‚ùó –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∏–∑ –≥–æ—Å—Ç—è");
        throw Exception('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –≥–æ—Å—Ç—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
      }

      final response = await _apiClient.dio.post(
        '/api/auth/register-from-guest',
        data: {
          "username": username,
          "email": email,
          "password": password
        }
      );

      debugPrint("üì• –û—Ç–≤–µ—Ç: ${response.data}");

      if (response.data['success'] == false) {
        throw DioException(
          requestOptions: RequestOptions(path: '/api/auth/register-from-guest'),
          response: Response(
            requestOptions: RequestOptions(path: '/api/auth/register-from-guest'),
            statusCode: 400,
            data: response.data
          )
        );
      }

      final newToken = response.data['data'];
      await SecureStorage.saveToken(newToken);
      await SecureStorage.saveIsGuest(false);
      debugPrint("‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –≥–æ—Å—Ç—è. –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: $newToken");
    } on DioException catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ DIO –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –≥–æ—Å—Ç—è: ${e.response?.data}");
      throw Exception(_handleRegistrationError(e));
    } catch (e) {
      debugPrint("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –≥–æ—Å—Ç—è: $e");
      throw Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    }
  }
}
